datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-1.1.x", "debian-openssl-1.1.x"]
}

model User {
  id          Int          @id @default(autoincrement()) @map("id")
  googleId    String       @unique @map("google_id")
  email       String       @unique @map("email")
  name        String       @map("name")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  vocabularies Vocabulary[]
  testResults TestResult[]
  testHistories TestHistory[]
  settings UserSetting[]

  @@map("users")
}

model PartOfSpeech {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @unique @map("name")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  vocabularies Vocabulary[]

  @@map("parts_of_speech")
}

model Vocabulary {
  id          Int      @id @default(autoincrement()) @map("id")
  userId      Int      @map("user_id")
  word        String   @map("word")
  meaning     String   @map("meaning")
  partOfSpeechId Int? @map("part_of_speech_id") // 品詞（選択）
  pronunciation String? @map("pronunciation") // 発音記号
  exampleSentence String? @map("example_sentence") // 例文
  synonyms    String?  @map("synonyms") // 類義語
  antonyms    String?  @map("antonyms") // 対義語
  url         String?  @map("url") // URL
  memorized   Boolean? @map("memorized") // 覚えたかチェック
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  partOfSpeech PartOfSpeech? @relation(fields: [partOfSpeechId], references: [id])
  testResults TestResult[]

  @@map("vocabularies")
}

model TestResult {
  id            Int          @id @default(autoincrement()) @map("id")
  userId        Int          @map("user_id")
  vocabularyId  Int          @map("vocabulary_id")
  testHistoryId Int          @map("test_history_id")
  isCorrect     Boolean      @map("is_correct")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  deletedAt     DateTime?    @map("deleted_at")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  vocabulary    Vocabulary   @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)
  testHistory   TestHistory  @relation(fields: [testHistoryId], references: [id], onDelete: Cascade)

  @@map("test_results")
}

model TestHistory {
  id          Int          @id @default(autoincrement()) @map("id")
  userId      Int          @map("user_id")
  testDate    DateTime     @default(now()) @map("test_date")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  testResults TestResult[]

  @@map("test_histories")
}

model UserSetting {
  id           Int       @id @default(autoincrement()) @map("id")
  userId       Int       @map("user_id")
  settingKey   String    @map("setting_key")
  settingValue String    @map("setting_value")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}